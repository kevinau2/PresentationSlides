NoSQL: The Big Picture (Andrew J. Brust)
RELATIONAL
-columns/rows
-Multiple tables with a common key between tables to denote a relation
NoSQL
-Still have a concept of a individual data item like a "row" and a 
collection of data items like a table but unlike in relational DBs the fields are not set.
-i.e. for documents in a collection, the documents can have entirely different fields and 
different numbers of fields (e.g. schema free -> referential integrity enforced by own processes)
-"Web scale" -> relational dbs can't handle (millions of concurrent users)
-More specifically, each document is made of a key-value pair

-NoSQL databases are commonly designed as distributed systems (reliable, throughput, latency),
though you can run it on a single server if necessary
CAP - NOSQL sacrifices consistency, relational sacrifices availability
-NoSQL uses mapreduce in it's queries

your audience knows what is mongodb ,but you can quickly cover like what is document 
then quickly take them to indexes, partition key/ sharding etc.. 

NoSQL Categories
Key value stores (e.g. dynomite)
Document Stores (e.g. MongoDB) - value corresponding to a key can be a nested document or
a reference to another document
Wide Column stores (e.g. Cassandra) - have groups of columns by some common characteristic
Graph Databases (e.g. Neo4j) - nodes, which can have different attributes, are connected by edges
which themselves denote a relationship.

Financial
MongoDB is open source - no license to use required but cloud provision might need fee

NoSQL Performance
-Significantly better performance when there is a large amount of simple storage and retrieval
concurrently (relational dbs better at low load)
